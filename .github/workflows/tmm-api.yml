name: tmm-api

on:
  push:
    paths:
      - "/services/tmm-api/**"
      - "docker-compose.*.yaml"

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  STACK_NAME: tmm-api

jobs:
  checks:
    defaults:
      run:
        working-directory: "services/tmm-api"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"
      - run: poetry config virtualenvs.prefer-active-python true
      - run: poetry install
      - name: Tests
        run: poetry run pytest
      - name: Typing - mypy
        run: poetry run mypy .
      - name: Lint - ruff
        run: poetry run ruff .
      - name: Lint - black
        run: poetry run black --check .

  docker:
    runs-on: ubuntu-latest
    outputs:
      TMM_API_IMAGE_NAME: ${{ steps.image-name.outputs.TMM_API_IMAGE_NAME}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set image name
        id: image-name
        run: |
          TMM_API_IMAGE_NAME=${REGISTRY}/${REPOSITORY}/${STACK_NAME}:latest
          echo "TMM_API_IMAGE_NAME=${TMM_API_IMAGE_NAME}" >> $GITHUB_ENV
          echo "TMM_API_IMAGE_NAME=${TMM_API_IMAGE_NAME}" >> $GITHUB_OUTPUT
      - uses: buildpacks/github-actions/setup-pack@v4.8.1
      - name: Build tmm-api image using buildpacks
        working-directory: "services/tmm-api"
        run: pack build ${TMM_API_IMAGE_NAME} --buildpack paketo-buildpacks/python --builder gcr.io/paketo-buildpacks/builder:base
      - name: Start service
        run: docker-compose -f docker-compose.int.yaml up -d
      - name: Check service
        run: |
          sleep 10
          curl -f localhost:5000/internal/health/self
          curl -f localhost:5000/internal/health/int
      - name: Service Logs
        if: failure()
        run: docker-compose -f docker-compose.int.yaml logs
      - name: Stop service
        if: always()
        run: docker-compose -f docker-compose.int.yaml down
      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        if: github.ref_name == 'main'
        run: docker push ${TMM_API_IMAGE_NAME}

  deploy-dev:
    runs-on: ubuntu-latest
    environment: development
    if: ${{ false }}
    env:
      DOCKER_HOST: ${{ secrets.DEV_DOCKER_HOST }}
    needs:
      - checks
      - docker
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup SSH Known Hosts
        run: |
          mkdir -p -m 0700 ~/.ssh
          echo "Add domain to known hosts"
          ssh-keyscan ${{ secrets.DEV_HOST_NAME }} >> ~/.ssh/known_hosts
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/known_hosts
      - name: Set Environment
        run: echo "TMM_API_IMAGE_NAME=${{ needs.docker.outputs.TMM_API_IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Create Docker Secrets if missing
        run: |
          docker secret inspect tmm_bucket > /dev/null || echo "${{ secrets.DEV_TMM_BUCKET }}" | docker secret create tmm_bucket -
          docker secret inspect tmm_api_key > /dev/null || echo "${{ secrets.DEV_TMM_API_KEY }}" | docker secret create tmm_api_key -
          docker secret inspect tmm_influx_config > /dev/null || echo "${{ secrets.DEV_TMM_INFLUX_CONFIG }}" | docker secret create tmm_influx_config -
      - name: Create docker influx config
        run: echo "${{ secrets.DEV_INFLUX_DOCKER_ENV }}" > ./influx_docker.env
      - name: Copy nginx config
        run: cat ./services/nginx/nginx.conf |  docker run -i  -v nginx_config:/dest alpine sh -c 'cat > /dest/nginx.conf'
      - name: Deploy Docker Stack
        run: docker stack deploy --prune --compose-file docker-compose.dev.yaml tmm-dev

  deploy-production:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    environment: production
    env:
      DOCKER_HOST: ${{ secrets.PROD_DOCKER_HOST }}
      TMM_BUCKET: ${{ secrets.PROD_TMM_BUCKET }}
    needs:
      - checks
      - docker
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup SSH Known Hosts
        run: |
          mkdir -p -m 0700 ~/.ssh
          echo "Add domain to known hosts"
          echo "${{ secrets.PROD_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/known_hosts
      - name: Set Environment
        run: echo "TMM_API_IMAGE_NAME=${{ needs.docker.outputs.TMM_API_IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Copy influx config to docker volume
        run: echo "${{ secrets.PROD_INFLUX_CONFIG }}" |  docker run -i  -v prod_tmm_influx_config:/dest alpine sh -c 'cat > /dest/influx_config.ini'
      - name: Deploy Docker Stack
        run: docker-compose -f docker-compose.prod.yaml -p tmm-prod up -d --remove-orphans
